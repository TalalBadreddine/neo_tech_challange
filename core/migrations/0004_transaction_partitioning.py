# Generated by Django 5.1.3 on 2024-11-08 10:01

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_transactionstatistics'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            DROP MATERIALIZED VIEW IF EXISTS transaction_statistics CASCADE;

            ALTER TABLE IF EXISTS core_transaction RENAME TO transactions_old;

            CREATE TABLE core_transaction (
                transaction_id VARCHAR(50),
                client_id VARCHAR(50) REFERENCES core_client(client_id),
                transaction_type VARCHAR(4),
                transaction_date TIMESTAMP WITH TIME ZONE NOT NULL,
                amount DECIMAL(15,2),
                currency VARCHAR(3),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            ) PARTITION BY RANGE ((EXTRACT(YEAR FROM (transaction_date AT TIME ZONE 'UTC'))::INTEGER));

            CREATE TABLE transactions_historical PARTITION OF core_transaction
                FOR VALUES FROM (MINVALUE) TO (2010);

            CREATE TABLE transactions_2010_2014 PARTITION OF core_transaction
                FOR VALUES FROM (2010) TO (2015);

            CREATE TABLE transactions_2015_2019 PARTITION OF core_transaction
                FOR VALUES FROM (2015) TO (2020);

            CREATE TABLE transactions_2020_2024 PARTITION OF core_transaction
                FOR VALUES FROM (2020) TO (2025);

            CREATE TABLE transactions_2025_2029 PARTITION OF core_transaction
                FOR VALUES FROM (2025) TO (2030);

            CREATE TABLE transactions_future PARTITION OF core_transaction
                FOR VALUES FROM (2030) TO (MAXVALUE);

            CREATE UNIQUE INDEX idx_historical_transaction_id ON transactions_historical(transaction_id);
            CREATE UNIQUE INDEX idx_2010_2014_transaction_id ON transactions_2010_2014(transaction_id);
            CREATE UNIQUE INDEX idx_2015_2019_transaction_id ON transactions_2015_2019(transaction_id);
            CREATE UNIQUE INDEX idx_2020_2024_transaction_id ON transactions_2020_2024(transaction_id);
            CREATE UNIQUE INDEX idx_2025_2029_transaction_id ON transactions_2025_2029(transaction_id);
            CREATE UNIQUE INDEX idx_future_transaction_id ON transactions_future(transaction_id);

            CREATE INDEX idx_transactions_historical_client ON transactions_historical(client_id);
            CREATE INDEX idx_transactions_2010_2014_client ON transactions_2010_2014(client_id);
            CREATE INDEX idx_transactions_2015_2019_client ON transactions_2015_2019(client_id);
            CREATE INDEX idx_transactions_2020_2024_client ON transactions_2020_2024(client_id);
            CREATE INDEX idx_transactions_2025_2029_client ON transactions_2025_2029(client_id);
            CREATE INDEX idx_transactions_future_client ON transactions_future(client_id);

            CREATE INDEX idx_transactions_historical_date ON transactions_historical USING btree(transaction_date);
            CREATE INDEX idx_transactions_2010_2014_date ON transactions_2010_2014 USING btree(transaction_date);
            CREATE INDEX idx_transactions_2015_2019_date ON transactions_2015_2019 USING btree(transaction_date);
            CREATE INDEX idx_transactions_2020_2024_date ON transactions_2020_2024 USING btree(transaction_date);
            CREATE INDEX idx_transactions_2025_2029_date ON transactions_2025_2029 USING btree(transaction_date);
            CREATE INDEX idx_transactions_future_date ON transactions_future USING btree(transaction_date);

            INSERT INTO core_transaction (
                transaction_id,
                client_id,
                transaction_type,
                transaction_date,
                amount,
                currency,
                created_at
            )
            SELECT
                transaction_id,
                client_id,
                transaction_type,
                transaction_date,
                amount,
                currency,
                created_at
            FROM transactions_old;

            DROP TABLE transactions_old;

            -- Recreating the materialized view with the new table
            CREATE MATERIALIZED VIEW transaction_statistics AS
            SELECT
                t.client_id,
                COUNT(*) as total_transactions,
                SUM(CASE
                    WHEN transaction_type = 'BUY' THEN amount
                    ELSE 0
                END) as total_spent,
                SUM(CASE
                    WHEN transaction_type = 'SELL' THEN ABS(amount)
                    ELSE 0
                END) as total_gained
            FROM core_transaction t
            GROUP BY t.client_id;

            CREATE UNIQUE INDEX transaction_statistics_client_id_idx
            ON transaction_statistics (client_id);
            """,
            reverse_sql="""
            ALTER TABLE core_transaction RENAME TO transactions_temp;

            CREATE TABLE core_transaction (
                transaction_id VARCHAR(50) PRIMARY KEY,
                client_id VARCHAR(50) REFERENCES core_client(client_id),
                transaction_type VARCHAR(4),
                transaction_date TIMESTAMP WITH TIME ZONE,
                amount DECIMAL(15,2),
                currency VARCHAR(3),
                created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
            );

            INSERT INTO core_transaction (
                transaction_id,
                client_id,
                transaction_type,
                transaction_date,
                amount,
                currency,
                created_at
            )
            SELECT
                transaction_id,
                client_id,
                transaction_type,
                transaction_date,
                amount,
                currency,
                created_at
            FROM transactions_temp;

            DROP TABLE transactions_temp CASCADE;
            """
        ),
    ]