services:
  web:
    build: .
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py createsuperuser --noinput || true &&
        python manage.py runserver 0.0.0.0:${PORT:-8000}
      "
    volumes:
      - .:/app
      - ${DATA_PATH:-./data}:/app/data
    ports:
      - "${PORT:-8000}:${PORT:-8000}"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ${ENV_FILE:-.env.example}
    environment:
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-adminpass123}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - DJANGO_SETTINGS_MODULE=neo_challenge.settings
    networks:
      - app-network

  db:
    image: postgres:${POSTGRES_VERSION:-14}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: ${HEALTHCHECK_INTERVAL:-5s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    networks:
      - app-network

  redis:
    image: redis:${REDIS_VERSION:-7}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: ${HEALTHCHECK_INTERVAL:-5s}
      timeout: ${HEALTHCHECK_TIMEOUT:-5s}
      retries: ${HEALTHCHECK_RETRIES:-5}
      start_period: ${HEALTHCHECK_START_PERIOD:-10s}
    networks:
      - app-network

  celery:
    build: .
    container_name: neo_challenge_celery  # Add this line to give it a fixed name
    command: celery -A ${PROJECT_NAME:-neo_challenge} worker -l ${CELERY_LOG_LEVEL:-info}
    volumes:
      - .:/app
      - ${DATA_PATH:-./data}:/app/data
      - prometheus_multiproc:/tmp/prometheus_multiproc
    ports:
      - "8001:8001"
    environment:
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ${ENV_FILE:-.env.example}
    networks:
      - app-network

volumes:
  postgres_data:
    name: ${POSTGRES_VOLUME_NAME:-neo_challenge_postgres_data}
  prometheus_multiproc:

networks:
  app-network:
    name: neo_challenge_network
    driver: bridge